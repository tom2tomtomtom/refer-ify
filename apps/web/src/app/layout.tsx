import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import Link from "next/link";
import { cookies } from "next/headers";
import { Button } from "@/components/ui/button";
import { getSupabaseServerClient } from "@/lib/supabase/server";
import "./globals.css";
import { Toaster } from "@/components/ui/sonner";
import { DevRoleSwitcher } from "@/components/dev/DevRoleSwitcher";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type SupportedRole = "client" | "founding" | "select" | null;

interface NavItem {
  label: string;
  href: string;
}

interface Navigation {
  items: NavItem[];
  cta: { label: string; href: string };
  roleLabel?: string;
}

function normalizeRole(role: string | null): SupportedRole {
  if (!role) return null;
  const r = role.toLowerCase();
  if (r === "client") return "client";
  if (r === "founding" || r === "founding_circle") return "founding";
  if (r === "select" || r === "select_circle") return "select";
  return null;
}

function getNavigationForRole(role: SupportedRole, hasClientJobs?: boolean): Navigation {
  if (role === "client") {
    return {
      items: [
        { label: "How It Works", href: "/how-it-works" },
        { label: "Success Stories", href: "/success-stories" },
        { label: "Get Started", href: "/apply" },
      ],
      cta: hasClientJobs
        ? { label: "View Jobs", href: "/client/jobs" }
        : { label: "Post First Job", href: "/client/jobs/new" },
      roleLabel: "Client Company",
    };
  }
  if (role === "founding") {
    return {
      items: [
        { label: "Network Growth", href: "/founding-circle" },
        { label: "Revenue Dashboard", href: "/founding-circle" },
        { label: "Invite Members", href: "/founding-circle" },
        { label: "Advisory", href: "/founding-circle" },
      ],
      cta: { label: "Dashboard", href: "/founding-circle" },
      roleLabel: "Founding Circle Member",
    };
  }
  if (role === "select") {
    return {
      items: [
        { label: "Job Opportunities", href: "/select-circle" },
        { label: "My Referrals", href: "/select-circle/referrals" },
        { label: "Earnings", href: "/select-circle" },
        { label: "Network", href: "/select-circle" },
      ],
      cta: { label: "Browse Jobs", href: "/select-circle" },
      roleLabel: "Select Circle Member",
    };
  }
  // Anonymous
  return {
    items: [
      { label: "How It Works", href: "/how-it-works" },
      { label: "For Companies", href: "/for-companies" },
      { label: "Join Network", href: "/join-network" },
      { label: "About", href: "/about" },
    ],
    cta: { label: "Request Invitation", href: "/apply" },
  };
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Resolve role (dev override cookie wins), and detect client job presence for CTA
  let headerRole: string | null = null;
  let userId: string | null = null;
  try {
    const supabase = await getSupabaseServerClient();
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      userId = user.id;
      const { data } = await supabase.from("profiles").select("role").eq("id", user.id).single();
      headerRole = data?.role ?? null;
    }
  } catch {}
  try {
    const cookieStore = await cookies();
    const devOverride = process.env.NODE_ENV !== 'production' ? cookieStore.get('dev_role_override')?.value : undefined;
    if (devOverride) headerRole = devOverride;
  } catch {}

  const normalizedRole = normalizeRole(headerRole);
  let hasClientJobs = false;
  if (normalizedRole === 'client' && userId) {
    try {
      const supabase = await getSupabaseServerClient();
      const { count } = await supabase
        .from('jobs')
        .select('id', { count: 'exact', head: true })
        .eq('client_id', userId);
      hasClientJobs = (count ?? 0) > 0;
    } catch {}
  }
  const navigation = getNavigationForRole(normalizedRole, hasClientJobs);
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <header className="sticky top-0 z-50 w-full border-b bg-background/80 backdrop-blur supports-[backdrop-filter]:bg-background/60">
          <div className="mx-auto flex max-w-7xl items-center justify-between px-4 py-3">
            <div className="flex items-center gap-2">
              <Link href="/" className="font-semibold tracking-tight">Refer-ify</Link>
              {navigation.roleLabel && (
                <span className="hidden sm:inline-flex items-center rounded-full border px-2 py-0.5 text-[10px] text-muted-foreground">
                  {navigation.roleLabel}
                </span>
              )}
            </div>
            <nav className="flex items-center gap-6 text-sm text-muted-foreground">
              {navigation.items.map((item) => (
                <Link key={item.href} href={item.href} className="hover:text-foreground">
                  {item.label}
                </Link>
              ))}
            </nav>
            <div className="flex items-center gap-3">
              <Link href={navigation.cta.href}>
                <Button className="bg-black text-white hover:opacity-90">{navigation.cta.label}</Button>
              </Link>
            </div>
          </div>
        </header>
        {children}
        {process.env.NODE_ENV === 'development' && (
          <DevRoleSwitcher currentRole={headerRole}
          />
        )}
        <Toaster />
      </body>
    </html>
  );
}
